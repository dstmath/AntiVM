/* DO NOT EDIT THIS FILE - it is machine generated */
#include "io_github_vmBoy_Who.h"
#include "antivm.h"
#include "mapinfo.h"
#include "cmdline.h"
/* Header for class io_github_vmBoy_Who */


/*
 * Class:     io_github_vmBoy_Who
 * Method:    map
 * Signature: ()V
 */
JNIEXPORT jstring JNICALL Java_io_github_vmBoy_Who_map
        (JNIEnv *env, jclass clazz) {
    mapinfo *minfo = init_mapinfo(getpid());

    mapinfo *minfotmp = minfo;
    if (minfotmp == NULL) {
        LOGE("nil ret");
        return env->NewStringUTF("-1");
    }


    while (minfotmp != NULL) {

        LOGE("  %s %d  %s   ", minfotmp->name, minfotmp->pkgRef, antivm_default_package());

        if (strcmp(minfotmp->name, antivm_default_package()) != 0) {
            _exit(999);

        }
        minfotmp = minfotmp->next;
    }
    deinit_mapinfo(minfo);
     return env->NewStringUTF("0");
}

/*
 * Class:     io_github_vmBoy_Who
 * Method:    unlink
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_io_github_vmBoy_Who_unlink(JNIEnv *env, jclass clazz, jstring jpath) {
    const char *nativeString = env->GetStringUTFChars(jpath, 0);
    int ret = unlink(nativeString);
#ifdef VMDEBUG
    LOGE("unlink %d ", ret);
#endif
    env->ReleaseStringUTFChars(jpath, nativeString);
    return ret;
}

char *uid_str(uid_t uid) {
    static char numstr[10];
    struct passwd *pw_ptr;

    if ((pw_ptr = getpwuid(uid)) == NULL) {
        sprintf(numstr, "%d", uid);
        return numstr;
    } else
        return pw_ptr->pw_name;
}

/*
 * Class:     io_github_vmBoy_Who
 * Method:    permission
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL
Java_io_github_vmBoy_Who_permission(JNIEnv *env, jclass clazz, jstring jpath) {
    const char *nativeString = env->GetStringUTFChars(jpath, 0);
    struct stat info;
    stat(nativeString, &info);

    struct passwd *pw = getpwuid(info.st_uid);
    struct group *gr = getgrgid(info.st_gid);
#ifdef VMDEBUG
    LOGE("%-8s ", uid_str(info.st_uid));
    LOGE("name %s", pw->pw_name);
    LOGE("name %ld", gr->gr_gid);
    LOGE("mypid %d", getpid());
#endif
    env->ReleaseStringUTFChars(jpath, nativeString);
    if (strcmp(pw->pw_name, "system") != 0) {
        _exit(1);
        return -1;
    }else{
    return 0;
    }


}


